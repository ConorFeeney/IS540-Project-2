{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Competition #2: Data Audit Report\n",
    "\n",
    "## Research Question & Goal:\n",
    "Is it possible to predict the sale price for each house in our data set? It is our job to predict the sales price for each house. For each Id in the test set, we must predict the value of the SalePrice variable. \n",
    "\n",
    "## Business Understanding:\n",
    "If you ask a home buyer to describe their dream house, they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But the dataset in this analysis proves that much more influences price negotiations than the number of bedrooms or whether there's a white-picket fence.\n",
    "\n",
    "A house is a building that functions as a home, ranging from simple dwellings such as rudimentary huts of nomadic tribes and the improvised shacks in shantytowns, to complex, fixed structures of wood, brick, concrete or other materials containing plumbing, ventilation and electrical systems. Houses use a range of different roofing systems to keep precipitation such as rain from getting into the dwelling space. Houses may have doors or locks to secure the dwelling space and protect its inhabitants and contents from burglars or other trespassers. Most conventional modern houses in Western cultures will contain one or more bedrooms and bathrooms, a kitchen or cooking area, and a living room. A house may have a separate dining room, or the eating area may be integrated into another room. Some large houses in North America also have a recreation room. \n",
    "\n",
    "With all the various ways a house can be constructed, and with all the different materials that can be used in its construction, how can one accurately determine the price of a house? Often when we refer to price we refer to sale price of a house. Architecture, foundations, floor space, and number of rooms all could play a part in determining the sale price of a house. The dataset that has been gathered for the purposes of this report contains 81 variables - 1 ID variable, 1 Target variable (SalePrice) and 79 Predictor variables, all listed below.    \n",
    "*     MSSubClass: The building class\n",
    "*     MSZoning: The general zoning classification\n",
    "*     LotFrontage: Linear feet of street connected to property\n",
    "*     LotArea: Lot size in square feet\n",
    "*     Street: Type of road access\n",
    "*     Alley: Type of alley access\n",
    "*     LotShape: General shape of property\n",
    "*     LandContour: Flatness of the property\n",
    "*     Utilities: Type of utilities available\n",
    "*     LotConfig: Lot configuration\n",
    "*     LandSlope: Slope of property\n",
    "*     Neighborhood: Physical locations within Ames city limits\n",
    "*     Condition1: Proximity to main road or railroad\n",
    "*     Condition2: Proximity to main road or railroad (if a second is present)\n",
    "*     BldgType: Type of dwelling\n",
    "*     HouseStyle: Style of dwelling\n",
    "*     OverallQual: Overall material and finish quality\n",
    "*     OverallCond: Overall condition rating\n",
    "*     YearBuilt: Original construction date\n",
    "*     YearRemodAdd: Remodel date\n",
    "*     RoofStyle: Type of roof\n",
    "*     RoofMatl: Roof material\n",
    "*     Exterior1st: Exterior covering on house\n",
    "*     Exterior2nd: Exterior covering on house (if more than one material)\n",
    "*     MasVnrType: Masonry veneer type\n",
    "*     MasVnrArea: Masonry veneer area in square feet\n",
    "*     ExterQual: Exterior material quality\n",
    "*     ExterCond: Present condition of the material on the exterior\n",
    "*     Foundation: Type of foundation\n",
    "*     BsmtQual: Height of the basement\n",
    "*     BsmtCond: General condition of the basement\n",
    "*     BsmtExposure: Walkout or garden level basement walls\n",
    "*     BsmtFinType1: Quality of basement finished area\n",
    "*     BsmtFinSF1: Type 1 finished square feet\n",
    "*     BsmtFinType2: Quality of second finished area (if present)\n",
    "*     BsmtFinSF2: Type 2 finished square feet\n",
    "*     BsmtUnfSF: Unfinished square feet of basement area\n",
    "*     TotalBsmtSF: Total square feet of basement area\n",
    "*     Heating: Type of heating\n",
    "*     HeatingQC: Heating quality and condition\n",
    "*     CentralAir: Central air conditioning\n",
    "*     Electrical: Electrical system\n",
    "*     1stFlrSF: First Floor square feet\n",
    "*     2ndFlrSF: Second floor square feet\n",
    "*     LowQualFinSF: Low quality finished square feet (all floors)\n",
    "*     GrLivArea: Above grade (ground) living area square feet\n",
    "*     BsmtFullBath: Basement full bathrooms\n",
    "*     BsmtHalfBath: Basement half bathrooms\n",
    "*     FullBath: Full bathrooms above grade\n",
    "*     HalfBath: Half baths above grade\n",
    "*     Bedroom: Number of bedrooms above basement level\n",
    "*     Kitchen: Number of kitchens\n",
    "*     KitchenQual: Kitchen quality\n",
    "*     TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n",
    "*     Functional: Home functionality rating\n",
    "*     Fireplaces: Number of fireplaces\n",
    "*     FireplaceQu: Fireplace quality\n",
    "*     GarageType: Garage location\n",
    "*     GarageYrBlt: Year garage was built\n",
    "*     GarageFinish: Interior finish of the garage\n",
    "*     GarageCars: Size of garage in car capacity\n",
    "*     GarageArea: Size of garage in square feet\n",
    "*     GarageQual: Garage quality\n",
    "*     GarageCond: Garage condition\n",
    "*     PavedDrive: Paved driveway\n",
    "*     WoodDeckSF: Wood deck area in square feet\n",
    "*     OpenPorchSF: Open porch area in square feet\n",
    "*     EnclosedPorch: Enclosed porch area in square feet\n",
    "*     3SsnPorch: Three season porch area in square feet\n",
    "*     ScreenPorch: Screen porch area in square feet\n",
    "*     PoolArea: Pool area in square feet\n",
    "*     PoolQC: Pool quality\n",
    "*     Fence: Fence quality\n",
    "*     MiscFeature: Miscellaneous feature not covered in other categories\n",
    "*     MiscVal: Value of miscellaneous feature\n",
    "*     MoSold: Month Sold\n",
    "*     YrSold: Year Sold\n",
    "*     SaleType: Type of sale\n",
    "*     SaleCondition: Condition of sale\n",
    "   \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Understanding\n",
    "## Training Set\n",
    "Our data set is divided into two parts, a training set and a testing set. To begin, we examine the training set. The data set contains 81 columns and 1460 rows. Our variables have the following breakdown: 36 are quantitative, 43 categorical and then Id and SalePrice are viewed separately. ID offers no predicitve value and SalePrice is our target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Importing useful packages\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import pandas as pd\n",
    "import sklearn as sk\n",
    "import seaborn as sb\n",
    "import datetime as dt\n",
    "import pylab \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "%matplotlib inline\n",
    "from sklearn import datasets\n",
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import statsmodels.api as sm\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn import metrics\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn import tree\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "\n",
    "\n",
    "# Read in Data file and define NaN values\n",
    "housetrain = pd.read_csv(\"train.csv\",header=0,na_values='None')\n",
    "housetrain.MSSubClass = housetrain.MSSubClass.astype(str)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After reading in the data into our python workspace, we had to change one of our integer variables to be a string for ease as it was not an ordinal categorical variarble. We then printed out our data types to make sure we were happy with them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id                 int64\n",
      "MSSubClass        object\n",
      "MSZoning          object\n",
      "LotFrontage      float64\n",
      "LotArea            int64\n",
      "Street            object\n",
      "Alley             object\n",
      "LotShape          object\n",
      "LandContour       object\n",
      "Utilities         object\n",
      "LotConfig         object\n",
      "LandSlope         object\n",
      "Neighborhood      object\n",
      "Condition1        object\n",
      "Condition2        object\n",
      "BldgType          object\n",
      "HouseStyle        object\n",
      "OverallQual        int64\n",
      "OverallCond        int64\n",
      "YearBuilt          int64\n",
      "YearRemodAdd       int64\n",
      "RoofStyle         object\n",
      "RoofMatl          object\n",
      "Exterior1st       object\n",
      "Exterior2nd       object\n",
      "MasVnrType        object\n",
      "MasVnrArea       float64\n",
      "ExterQual         object\n",
      "ExterCond         object\n",
      "Foundation        object\n",
      "BsmtQual          object\n",
      "BsmtCond          object\n",
      "BsmtExposure      object\n",
      "BsmtFinType1      object\n",
      "BsmtFinSF1         int64\n",
      "BsmtFinType2      object\n",
      "BsmtFinSF2         int64\n",
      "BsmtUnfSF          int64\n",
      "TotalBsmtSF        int64\n",
      "Heating           object\n",
      "HeatingQC         object\n",
      "CentralAir        object\n",
      "Electrical        object\n",
      "1stFlrSF           int64\n",
      "2ndFlrSF           int64\n",
      "LowQualFinSF       int64\n",
      "GrLivArea          int64\n",
      "BsmtFullBath       int64\n",
      "BsmtHalfBath       int64\n",
      "FullBath           int64\n",
      "HalfBath           int64\n",
      "BedroomAbvGr       int64\n",
      "KitchenAbvGr       int64\n",
      "KitchenQual       object\n",
      "TotRmsAbvGrd       int64\n",
      "Functional        object\n",
      "Fireplaces         int64\n",
      "FireplaceQu       object\n",
      "GarageType        object\n",
      "GarageYrBlt      float64\n",
      "GarageFinish      object\n",
      "GarageCars         int64\n",
      "GarageArea         int64\n",
      "GarageQual        object\n",
      "GarageCond        object\n",
      "PavedDrive        object\n",
      "WoodDeckSF         int64\n",
      "OpenPorchSF        int64\n",
      "EnclosedPorch      int64\n",
      "3SsnPorch          int64\n",
      "ScreenPorch        int64\n",
      "PoolArea           int64\n",
      "PoolQC            object\n",
      "Fence             object\n",
      "MiscFeature       object\n",
      "MiscVal            int64\n",
      "MoSold             int64\n",
      "YrSold             int64\n",
      "SaleType          object\n",
      "SaleCondition     object\n",
      "SalePrice          int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Print types\n",
    "pd.set_option('display.max_rows', 82)\n",
    "print(housetrain.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we perform a data describe to see the summary statistics of our data. As we can see below, some of our data has missing values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Id  LotFrontage        LotArea  OverallQual  OverallCond  \\\n",
      "count  1460.000000  1201.000000    1460.000000  1460.000000  1460.000000   \n",
      "mean    730.500000    70.049958   10516.828082     6.099315     5.575342   \n",
      "std     421.610009    24.284752    9981.264932     1.382997     1.112799   \n",
      "min       1.000000    21.000000    1300.000000     1.000000     1.000000   \n",
      "25%     365.750000    59.000000    7553.500000     5.000000     5.000000   \n",
      "50%     730.500000    69.000000    9478.500000     6.000000     5.000000   \n",
      "75%    1095.250000    80.000000   11601.500000     7.000000     6.000000   \n",
      "max    1460.000000   313.000000  215245.000000    10.000000     9.000000   \n",
      "\n",
      "         YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1   BsmtFinSF2  \\\n",
      "count  1460.000000   1460.000000  1452.000000  1460.000000  1460.000000   \n",
      "mean   1971.267808   1984.865753   103.685262   443.639726    46.549315   \n",
      "std      30.202904     20.645407   181.066207   456.098091   161.319273   \n",
      "min    1872.000000   1950.000000     0.000000     0.000000     0.000000   \n",
      "25%    1954.000000   1967.000000     0.000000     0.000000     0.000000   \n",
      "50%    1973.000000   1994.000000     0.000000   383.500000     0.000000   \n",
      "75%    2000.000000   2004.000000   166.000000   712.250000     0.000000   \n",
      "max    2010.000000   2010.000000  1600.000000  5644.000000  1474.000000   \n",
      "\n",
      "         BsmtUnfSF  TotalBsmtSF     1stFlrSF     2ndFlrSF  LowQualFinSF  \\\n",
      "count  1460.000000  1460.000000  1460.000000  1460.000000   1460.000000   \n",
      "mean    567.240411  1057.429452  1162.626712   346.992466      5.844521   \n",
      "std     441.866955   438.705324   386.587738   436.528436     48.623081   \n",
      "min       0.000000     0.000000   334.000000     0.000000      0.000000   \n",
      "25%     223.000000   795.750000   882.000000     0.000000      0.000000   \n",
      "50%     477.500000   991.500000  1087.000000     0.000000      0.000000   \n",
      "75%     808.000000  1298.250000  1391.250000   728.000000      0.000000   \n",
      "max    2336.000000  6110.000000  4692.000000  2065.000000    572.000000   \n",
      "\n",
      "         GrLivArea  BsmtFullBath  BsmtHalfBath     FullBath     HalfBath  \\\n",
      "count  1460.000000   1460.000000   1460.000000  1460.000000  1460.000000   \n",
      "mean   1515.463699      0.425342      0.057534     1.565068     0.382877   \n",
      "std     525.480383      0.518911      0.238753     0.550916     0.502885   \n",
      "min     334.000000      0.000000      0.000000     0.000000     0.000000   \n",
      "25%    1129.500000      0.000000      0.000000     1.000000     0.000000   \n",
      "50%    1464.000000      0.000000      0.000000     2.000000     0.000000   \n",
      "75%    1776.750000      1.000000      0.000000     2.000000     1.000000   \n",
      "max    5642.000000      3.000000      2.000000     3.000000     2.000000   \n",
      "\n",
      "       BedroomAbvGr  KitchenAbvGr  TotRmsAbvGrd   Fireplaces  GarageYrBlt  \\\n",
      "count   1460.000000   1460.000000   1460.000000  1460.000000  1379.000000   \n",
      "mean       2.866438      1.046575      6.517808     0.613014  1978.506164   \n",
      "std        0.815778      0.220338      1.625393     0.644666    24.689725   \n",
      "min        0.000000      0.000000      2.000000     0.000000  1900.000000   \n",
      "25%        2.000000      1.000000      5.000000     0.000000  1961.000000   \n",
      "50%        3.000000      1.000000      6.000000     1.000000  1980.000000   \n",
      "75%        3.000000      1.000000      7.000000     1.000000  2002.000000   \n",
      "max        8.000000      3.000000     14.000000     3.000000  2010.000000   \n",
      "\n",
      "        GarageCars   GarageArea   WoodDeckSF  OpenPorchSF  EnclosedPorch  \\\n",
      "count  1460.000000  1460.000000  1460.000000  1460.000000    1460.000000   \n",
      "mean      1.767123   472.980137    94.244521    46.660274      21.954110   \n",
      "std       0.747315   213.804841   125.338794    66.256028      61.119149   \n",
      "min       0.000000     0.000000     0.000000     0.000000       0.000000   \n",
      "25%       1.000000   334.500000     0.000000     0.000000       0.000000   \n",
      "50%       2.000000   480.000000     0.000000    25.000000       0.000000   \n",
      "75%       2.000000   576.000000   168.000000    68.000000       0.000000   \n",
      "max       4.000000  1418.000000   857.000000   547.000000     552.000000   \n",
      "\n",
      "         3SsnPorch  ScreenPorch     PoolArea       MiscVal       MoSold  \\\n",
      "count  1460.000000  1460.000000  1460.000000   1460.000000  1460.000000   \n",
      "mean      3.409589    15.060959     2.758904     43.489041     6.321918   \n",
      "std      29.317331    55.757415    40.177307    496.123024     2.703626   \n",
      "min       0.000000     0.000000     0.000000      0.000000     1.000000   \n",
      "25%       0.000000     0.000000     0.000000      0.000000     5.000000   \n",
      "50%       0.000000     0.000000     0.000000      0.000000     6.000000   \n",
      "75%       0.000000     0.000000     0.000000      0.000000     8.000000   \n",
      "max     508.000000   480.000000   738.000000  15500.000000    12.000000   \n",
      "\n",
      "            YrSold      SalePrice  \n",
      "count  1460.000000    1460.000000  \n",
      "mean   2007.815753  180921.195890  \n",
      "std       1.328095   79442.502883  \n",
      "min    2006.000000   34900.000000  \n",
      "25%    2007.000000  129975.000000  \n",
      "50%    2008.000000  163000.000000  \n",
      "75%    2009.000000  214000.000000  \n",
      "max    2010.000000  755000.000000  \n"
     ]
    }
   ],
   "source": [
    "# Data describe\n",
    "pd.set_option('display.max_columns', 500)\n",
    "print(housetrain.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Summary statistics are important to observe obvious outliers and initial trends.\n",
    "* Some of our variables contain missing data. This is by and large due to the formatting of the data in its use of \"NA\" to show when a house doesn't contain a feature. Nonetheless, it was decided to use it as missing initially to investigate if any variables contained imbalances due to missing data. Additionally, some variables contain all records (1460) but have zero as the minimum. Based on our analysis, this is more than likely due to the fact the house doesn't have this feature. For example, if we look at *TotBsmtSF*, which is the total square feet of the basement, we see that it is missing no records but has zero as a minimum. This more than likely means that the house does not have a basement.\n",
    "* We notice on average, there is more unfinished basement space than finished basement space. \n",
    "* There is on average 200 square feet less space upstairs than downstairs in houses. This makes sense as some homes don't have a complete second floor, and most houses are not built as a perfect square but reduce size on the second floor for structural requirements. \n",
    "* Some of our summary statistic variables are actually ordinal data so their summary statistics do not reveal much other than that they have no erroneous values (*OverallQual, OverallCond, YearBuilt, YearRemodAdd, MasVnrArea, GarageYrBlt, MoSold, YrSold*)\n",
    "\n",
    "Next, we look to quantify the missingness of our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The missingness of variable Id\n",
      "0.00%\n",
      "The missingness of variable MSSubClass\n",
      "0.00%\n",
      "The missingness of variable MSZoning\n",
      "0.00%\n",
      "The missingness of variable LotFrontage\n",
      "17.74%\n",
      "The missingness of variable LotArea\n",
      "0.00%\n",
      "The missingness of variable Street\n",
      "0.00%\n",
      "The missingness of variable Alley\n",
      "93.77%\n",
      "The missingness of variable LotShape\n",
      "0.00%\n",
      "The missingness of variable LandContour\n",
      "0.00%\n",
      "The missingness of variable Utilities\n",
      "0.00%\n",
      "The missingness of variable LotConfig\n",
      "0.00%\n",
      "The missingness of variable LandSlope\n",
      "0.00%\n",
      "The missingness of variable Neighborhood\n",
      "0.00%\n",
      "The missingness of variable Condition1\n",
      "0.00%\n",
      "The missingness of variable Condition2\n",
      "0.00%\n",
      "The missingness of variable BldgType\n",
      "0.00%\n",
      "The missingness of variable HouseStyle\n",
      "0.00%\n",
      "The missingness of variable OverallQual\n",
      "0.00%\n",
      "The missingness of variable OverallCond\n",
      "0.00%\n",
      "The missingness of variable YearBuilt\n",
      "0.00%\n",
      "The missingness of variable YearRemodAdd\n",
      "0.00%\n",
      "The missingness of variable RoofStyle\n",
      "0.00%\n",
      "The missingness of variable RoofMatl\n",
      "0.00%\n",
      "The missingness of variable Exterior1st\n",
      "0.00%\n",
      "The missingness of variable Exterior2nd\n",
      "0.00%\n",
      "The missingness of variable MasVnrType\n",
      "59.73%\n",
      "The missingness of variable MasVnrArea\n",
      "0.55%\n",
      "The missingness of variable ExterQual\n",
      "0.00%\n",
      "The missingness of variable ExterCond\n",
      "0.00%\n",
      "The missingness of variable Foundation\n",
      "0.00%\n",
      "The missingness of variable BsmtQual\n",
      "2.53%\n",
      "The missingness of variable BsmtCond\n",
      "2.53%\n",
      "The missingness of variable BsmtExposure\n",
      "2.60%\n",
      "The missingness of variable BsmtFinType1\n",
      "2.53%\n",
      "The missingness of variable BsmtFinSF1\n",
      "0.00%\n",
      "The missingness of variable BsmtFinType2\n",
      "2.60%\n",
      "The missingness of variable BsmtFinSF2\n",
      "0.00%\n",
      "The missingness of variable BsmtUnfSF\n",
      "0.00%\n",
      "The missingness of variable TotalBsmtSF\n",
      "0.00%\n",
      "The missingness of variable Heating\n",
      "0.00%\n",
      "The missingness of variable HeatingQC\n",
      "0.00%\n",
      "The missingness of variable CentralAir\n",
      "0.00%\n",
      "The missingness of variable Electrical\n",
      "0.07%\n",
      "The missingness of variable 1stFlrSF\n",
      "0.00%\n",
      "The missingness of variable 2ndFlrSF\n",
      "0.00%\n",
      "The missingness of variable LowQualFinSF\n",
      "0.00%\n",
      "The missingness of variable GrLivArea\n",
      "0.00%\n",
      "The missingness of variable BsmtFullBath\n",
      "0.00%\n",
      "The missingness of variable BsmtHalfBath\n",
      "0.00%\n",
      "The missingness of variable FullBath\n",
      "0.00%\n",
      "The missingness of variable HalfBath\n",
      "0.00%\n",
      "The missingness of variable BedroomAbvGr\n",
      "0.00%\n",
      "The missingness of variable KitchenAbvGr\n",
      "0.00%\n",
      "The missingness of variable KitchenQual\n",
      "0.00%\n",
      "The missingness of variable TotRmsAbvGrd\n",
      "0.00%\n",
      "The missingness of variable Functional\n",
      "0.00%\n",
      "The missingness of variable Fireplaces\n",
      "0.00%\n",
      "The missingness of variable FireplaceQu\n",
      "47.26%\n",
      "The missingness of variable GarageType\n",
      "5.55%\n",
      "The missingness of variable GarageYrBlt\n",
      "5.55%\n",
      "The missingness of variable GarageFinish\n",
      "5.55%\n",
      "The missingness of variable GarageCars\n",
      "0.00%\n",
      "The missingness of variable GarageArea\n",
      "0.00%\n",
      "The missingness of variable GarageQual\n",
      "5.55%\n",
      "The missingness of variable GarageCond\n",
      "5.55%\n",
      "The missingness of variable PavedDrive\n",
      "0.00%\n",
      "The missingness of variable WoodDeckSF\n",
      "0.00%\n",
      "The missingness of variable OpenPorchSF\n",
      "0.00%\n",
      "The missingness of variable EnclosedPorch\n",
      "0.00%\n",
      "The missingness of variable 3SsnPorch\n",
      "0.00%\n",
      "The missingness of variable ScreenPorch\n",
      "0.00%\n",
      "The missingness of variable PoolArea\n",
      "0.00%\n",
      "The missingness of variable PoolQC\n",
      "99.52%\n",
      "The missingness of variable Fence\n",
      "80.75%\n",
      "The missingness of variable MiscFeature\n",
      "96.30%\n",
      "The missingness of variable MiscVal\n",
      "0.00%\n",
      "The missingness of variable MoSold\n",
      "0.00%\n",
      "The missingness of variable YrSold\n",
      "0.00%\n",
      "The missingness of variable SaleType\n",
      "0.00%\n",
      "The missingness of variable SaleCondition\n",
      "0.00%\n",
      "The missingness of variable SalePrice\n",
      "0.00%\n"
     ]
    }
   ],
   "source": [
    "# Get numeric value to missing features\n",
    "for i in range(len(housetrain.columns)):\n",
    "    j = housetrain.columns[i]\n",
    "    miss=((1460-housetrain[str(j)].count())/1460)*100\n",
    "    print(\"The missingness of variable {}\".format(j))\n",
    "    print(\"{0:.2f}%\".format(miss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc8ee198>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nLATOBF4u6UbgAOC4PGGbmVmnOmq6iYh7ga2K23cBOwxwn5nAzH7HFgDvqB2lmZlV5glTZmYN50Rv\nZtZwTvRmZg3nRG9m1nBO9GZmDedEb2bWcE70ZmYN50RvZtZwTvRmZg3nRG9m1nBO9GZmDedEb2bW\ncE70ZmYNV2XjETOzLPY9+boh7zPrqB2XQyTN5hq9mVnDOdGbmTWcE72ZWcM50ZuZNZwTvZlZwznR\nm5k1XKXhlZJWAs4DNgSeAfYHFgPnAr3A7cBBEbFE0v7AgcXvT4iIq+qHbWZmnapao98VGB8R2wCf\nAT4LnApMj4jtgDHA7pLWBQ4GtgV2Bk6SNKF+2GZm1qmqif4uYLykscBqwL+ALYDri99fDewETAVm\nR8SiiJgH3A1sVi9kMzMro+rM2CdJzTZ3AmsBbwG2j4je4vfzgdVJJ4F5bY9rHV+mKVMmMX78uCGD\n6OmZXCro4SojVzndFEuuchzL8JbTTbHkLCd3md30941ELFUT/SHAtRHxSUkvAK4DVm77/WTgceCJ\n4nb/48s0d+6CIQPo6ZnMnDnzy8Q8LGU0MZZc5TiW4S2nm2LJWU5/OcrMFVe3xzJY8q/adDOXvpr6\nY8BKwC2SphXHdgFuAG4GtpM0UdLqwCakjlozM1tOqtbovwTMknQDqSZ/NPBrYKaklYE7gMsi4hlJ\nM0hJfyxwTEQszBC3mZl1qFKij4gngXcO8KsdBrjvTGBmlecxM7P6PGHKzKzhnOjNzBrOid7MrOGc\n6M3MGs6J3sys4ZzozcwazonezKzhnOjNzBrOid7MrOGc6M3MGs6J3sys4aouamZmK7B9T75uyPvM\nOmrH5RCJdcI1ejOzhnOiNzNrOCd6M7OGc6I3M2s4J3ozs4ZzojczazgnejOzhnOiNzNrOCd6M7OG\nqzwzVtIngbcBKwNnANcD5wK9wO3AQRGxRNL+wIHAYuCEiLiqbtBmZta5SjV6SdOAbYBtgR2AFwCn\nAtMjYjtgDLC7pHWBg4v77QycJGlChrjNzKxDVZtudgZuA64Avg9cBWxBqtUDXA3sBEwFZkfEooiY\nB9wNbFYrYjMzK6Vq081awAuBtwAvAr4HjI2I3uL384HVgdWAeW2Pax1fpilTJjF+/Lghg+jpmVwu\n6mEqI1c53RRLrnIcy/CW002xDFeZTXudRiKWqon+H8CdEfE0EJIWkppvWiYDjwNPFLf7H1+muXMX\n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\nC/TtpCgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xc8eea58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "missing = housetrain.isnull().sum()\n",
    "missing = missing[missing > 0]\n",
    "missing.sort_values(inplace=True)\n",
    "missing.plot.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most obvious example of missing is *PoolQC*. Looking at the graph it has the most number of missing values, as most houses in Ames do not have a pool on the property. Looking at the main culprits of missing values, we actaully see it makes sense that these variables have so many missing. *MiscFeature* is for features like tennis courts, second garages, elevators.Not many families can afford these types of add ons to their home, so the missingness of this variable makes sense. For the moment, it was decided to keep them in our dataset, as the few houses they do affect would see a dramatic increase in their sale price due to these features. Anything with around 50% of the data missing should be removed from further analysis, meaning we remove the following variables:\n",
    "* *PoolQC*\n",
    "* *MiscFeature*\n",
    "* *Alley*\n",
    "* *Fence*\n",
    "* *MasVnrType*\n",
    "* *FireplaceQu* \n",
    "\n",
    "However, despite the large number of missing values, these could be construed as rare noise so we will keep them for the moment. Later, we will use Principal Component Analysis and let PCA decide which variables should be kept."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imputation\n",
    "As we saw, the biggest culprits of our missing data have perfectly logical reasons behind it. With that in mind, it was decided to fill in the NA values using either string representations of what was really going on (i.e. no pool) or zero."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Alley : data description says NA means \"no alley access\"\n",
    "housetrain.loc[:, \"Alley\"] = housetrain.loc[:, \"Alley\"].fillna(\"None\")\n",
    "# BedroomAbvGr : NA most likely means 0\n",
    "housetrain.loc[:, \"BedroomAbvGr\"] = housetrain.loc[:, \"BedroomAbvGr\"].fillna(0)\n",
    "# BsmtQual etc : data description says NA for basement features is \"no basement\"\n",
    "housetrain.loc[:, \"BsmtQual\"] = housetrain.loc[:, \"BsmtQual\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"BsmtCond\"] = housetrain.loc[:, \"BsmtCond\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"BsmtExposure\"] = housetrain.loc[:, \"BsmtExposure\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"BsmtFinType1\"] = housetrain.loc[:, \"BsmtFinType1\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"BsmtFinType2\"] = housetrain.loc[:, \"BsmtFinType2\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"BsmtFullBath\"] = housetrain.loc[:, \"BsmtFullBath\"].fillna(0)\n",
    "housetrain.loc[:, \"BsmtHalfBath\"] = housetrain.loc[:, \"BsmtHalfBath\"].fillna(0)\n",
    "housetrain.loc[:, \"BsmtUnfSF\"] = housetrain.loc[:, \"BsmtUnfSF\"].fillna(0)\n",
    "# CentralAir : NA most likely means No\n",
    "housetrain.loc[:, \"CentralAir\"] = housetrain.loc[:, \"CentralAir\"].fillna(\"N\")\n",
    "# Condition : NA most likely means Normal\n",
    "housetrain.loc[:, \"Condition1\"] = housetrain.loc[:, \"Condition1\"].fillna(\"Norm\")\n",
    "housetrain.loc[:, \"Condition2\"] = housetrain.loc[:, \"Condition2\"].fillna(\"Norm\")\n",
    "# EnclosedPorch : NA most likely means no enclosed porch\n",
    "housetrain.loc[:, \"EnclosedPorch\"] = housetrain.loc[:, \"EnclosedPorch\"].fillna(0)\n",
    "# External stuff : NA most likely means average\n",
    "housetrain.loc[:, \"ExterCond\"] = housetrain.loc[:, \"ExterCond\"].fillna(\"TA\")\n",
    "housetrain.loc[:, \"ExterQual\"] = housetrain.loc[:, \"ExterQual\"].fillna(\"TA\")\n",
    "# Fence : data description says NA means \"no fence\"\n",
    "housetrain.loc[:, \"Fence\"] = housetrain.loc[:, \"Fence\"].fillna(\"No\")\n",
    "# FireplaceQu : data description says NA means \"no fireplace\"\n",
    "housetrain.loc[:, \"FireplaceQu\"] = housetrain.loc[:, \"FireplaceQu\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"Fireplaces\"] = housetrain.loc[:, \"Fireplaces\"].fillna(0)\n",
    "# Functional : data description says NA means typical\n",
    "housetrain.loc[:, \"Functional\"] = housetrain.loc[:, \"Functional\"].fillna(\"Typ\")\n",
    "# GarageType etc : data description says NA for garage features is \"no garage\"\n",
    "housetrain.loc[:, \"GarageType\"] = housetrain.loc[:, \"GarageType\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"GarageFinish\"] = housetrain.loc[:, \"GarageFinish\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"GarageQual\"] = housetrain.loc[:, \"GarageQual\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"GarageCond\"] = housetrain.loc[:, \"GarageCond\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"GarageArea\"] = housetrain.loc[:, \"GarageArea\"].fillna(0)\n",
    "housetrain.loc[:, \"GarageCars\"] = housetrain.loc[:, \"GarageCars\"].fillna(0)\n",
    "# HalfBath : NA most likely means no half baths above grade\n",
    "housetrain.loc[:, \"HalfBath\"] = housetrain.loc[:, \"HalfBath\"].fillna(0)\n",
    "# HeatingQC : NA most likely means typical\n",
    "housetrain.loc[:, \"HeatingQC\"] = housetrain.loc[:, \"HeatingQC\"].fillna(\"TA\")\n",
    "# KitchenAbvGr : NA most likely means 0\n",
    "housetrain.loc[:, \"KitchenAbvGr\"] = housetrain.loc[:, \"KitchenAbvGr\"].fillna(0)\n",
    "# KitchenQual : NA most likely means typical\n",
    "housetrain.loc[:, \"KitchenQual\"] = housetrain.loc[:, \"KitchenQual\"].fillna(\"TA\")\n",
    "# LotFrontage : NA most likely means no lot frontage\n",
    "housetrain.loc[:, \"LotFrontage\"] = housetrain.loc[:, \"LotFrontage\"].fillna(0)\n",
    "# LotShape : NA most likely means regular\n",
    "housetrain.loc[:, \"LotShape\"] = housetrain.loc[:, \"LotShape\"].fillna(\"Reg\")\n",
    "# MasVnrType : NA most likely means no veneer\n",
    "#housetrain.loc[:, \"MasVnrType\"] = housetrain.loc[:, \"MasVnrType\"].fillna(\"None\")\n",
    "housetrain.loc[:, \"MasVnrArea\"] = housetrain.loc[:, \"MasVnrArea\"].fillna(0)\n",
    "# MiscFeature : data description says NA means \"no misc feature\"\n",
    "housetrain.loc[:, \"MiscFeature\"] = housetrain.loc[:, \"MiscFeature\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"MiscVal\"] = housetrain.loc[:, \"MiscVal\"].fillna(0)\n",
    "# OpenPorchSF : NA most likely means no open porch\n",
    "housetrain.loc[:, \"OpenPorchSF\"] = housetrain.loc[:, \"OpenPorchSF\"].fillna(0)\n",
    "# PavedDrive : NA most likely means not paved\n",
    "housetrain.loc[:, \"PavedDrive\"] = housetrain.loc[:, \"PavedDrive\"].fillna(\"N\")\n",
    "# PoolQC : data description says NA means \"no pool\"\n",
    "housetrain.loc[:, \"PoolQC\"] = housetrain.loc[:, \"PoolQC\"].fillna(\"No\")\n",
    "housetrain.loc[:, \"PoolArea\"] = housetrain.loc[:, \"PoolArea\"].fillna(0)\n",
    "# SaleCondition : NA most likely means normal sale\n",
    "housetrain.loc[:, \"SaleCondition\"] = housetrain.loc[:, \"SaleCondition\"].fillna(\"Normal\")\n",
    "# ScreenPorch : NA most likely means no screen porch\n",
    "housetrain.loc[:, \"ScreenPorch\"] = housetrain.loc[:, \"ScreenPorch\"].fillna(0)\n",
    "# TotRmsAbvGrd : NA most likely means 0\n",
    "housetrain.loc[:, \"TotRmsAbvGrd\"] = housetrain.loc[:, \"TotRmsAbvGrd\"].fillna(0)\n",
    "# Utilities : NA most likely means all public utilities\n",
    "housetrain.loc[:, \"Utilities\"] = housetrain.loc[:, \"Utilities\"].fillna(\"AllPub\")\n",
    "# WoodDeckSF : NA most likely means no wood deck\n",
    "housetrain.loc[:, \"WoodDeckSF\"] = housetrain.loc[:, \"WoodDeckSF\"].fillna(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Outliers\n",
    "Outliers are tricky when it comes to houses as bidding wars can drive up a price of a house, additionaly abstract features like tennis courts also greatly affect the selling price of a house, where the house is located can have serious implications as to the value of a house. Additionally with so many variables to maintain and manage, tracking down outliers is a difficult business. For simplicity, we will examine sale price against the above grade square feet as this variable tells us a very important feature of a house."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcae6278>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting scatter plot of the two variables\n",
    "plt.scatter(housetrain.GrLivArea, housetrain.SalePrice, c = \"blue\", marker = \"s\")\n",
    "plt.title(\"Looking for outliers\")\n",
    "plt.xlabel(\"GrLivArea\")\n",
    "plt.ylabel(\"SalePrice\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, we have four outliers. Two houses that sold for far less than they should have based on the square footage, and two that sold for far more than the average. It was decided, based discussions and advice from the project brief on Kaggle to remove house that have a square footage of more than 4000 feet. This action removes 4 data points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "housetrain = housetrain[housetrain.GrLivArea < 4000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Recoding\n",
    "Recoding involves substituting the values of a variable with values that are more useful. Recoding is done for a number of reasons; to create a more balanced variable by grouping small occurances, to reduce the number of distinct values, to group similar values together and so on. It is an important feature in data analysis as it helps to reduce the curse of dimensionaility later when we create dummy variables for our categorical variables.\n",
    "\n",
    "In this section, we will be conducting an initial recoding of our variables. This will be based on trying to keep a variable having no more than 5 distinct values. Groupings will be done using the methods listed above. The first task is to get the frequency counts of our current values in each variable as we will see below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20     536\n",
      "60     295\n",
      "50     144\n",
      "120     87\n",
      "30      69\n",
      "160     63\n",
      "70      60\n",
      "80      58\n",
      "90      52\n",
      "190     30\n",
      "85      20\n",
      "75      16\n",
      "45      12\n",
      "180     10\n",
      "40       4\n",
      "Name: MSSubClass, dtype: int64\n",
      "\n",
      "\n",
      "RL         1147\n",
      "RM          218\n",
      "FV           65\n",
      "RH           16\n",
      "C (all)      10\n",
      "Name: MSZoning, dtype: int64\n",
      "\n",
      "\n",
      "Pave    1450\n",
      "Grvl       6\n",
      "Name: Street, dtype: int64\n",
      "\n",
      "\n",
      "None    1365\n",
      "Grvl      50\n",
      "Pave      41\n",
      "Name: Alley, dtype: int64\n",
      "\n",
      "\n",
      "Reg    925\n",
      "IR1    481\n",
      "IR2     41\n",
      "IR3      9\n",
      "Name: LotShape, dtype: int64\n",
      "\n",
      "\n",
      "Lvl    1309\n",
      "Bnk      61\n",
      "HLS      50\n",
      "Low      36\n",
      "Name: LandContour, dtype: int64\n",
      "\n",
      "\n",
      "AllPub    1455\n",
      "NoSeWa       1\n",
      "Name: Utilities, dtype: int64\n",
      "\n",
      "\n",
      "Inside     1051\n",
      "Corner      260\n",
      "CulDSac      94\n",
      "FR2          47\n",
      "FR3           4\n",
      "Name: LotConfig, dtype: int64\n",
      "\n",
      "\n",
      "Gtl    1378\n",
      "Mod      65\n",
      "Sev      13\n",
      "Name: LandSlope, dtype: int64\n",
      "\n",
      "\n",
      "NAmes      225\n",
      "CollgCr    150\n",
      "OldTown    113\n",
      "Edwards     98\n",
      "Somerst     86\n",
      "Gilbert     79\n",
      "NridgHt     77\n",
      "Sawyer      74\n",
      "NWAmes      73\n",
      "SawyerW     59\n",
      "BrkSide     58\n",
      "Crawfor     51\n",
      "Mitchel     49\n",
      "NoRidge     39\n",
      "Timber      38\n",
      "IDOTRR      37\n",
      "ClearCr     28\n",
      "SWISU       25\n",
      "StoneBr     25\n",
      "Blmngtn     17\n",
      "MeadowV     17\n",
      "BrDale      16\n",
      "Veenker     11\n",
      "NPkVill      9\n",
      "Blueste      2\n",
      "Name: Neighborhood, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1258\n",
      "Feedr       80\n",
      "Artery      48\n",
      "RRAn        26\n",
      "PosN        18\n",
      "RRAe        11\n",
      "PosA         8\n",
      "RRNn         5\n",
      "RRNe         2\n",
      "Name: Condition1, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1442\n",
      "Feedr        6\n",
      "RRNn         2\n",
      "Artery       2\n",
      "RRAn         1\n",
      "PosN         1\n",
      "PosA         1\n",
      "RRAe         1\n",
      "Name: Condition2, dtype: int64\n",
      "\n",
      "\n",
      "1Fam      1216\n",
      "TwnhsE     114\n",
      "Duplex      52\n",
      "Twnhs       43\n",
      "2fmCon      31\n",
      "Name: BldgType, dtype: int64\n",
      "\n",
      "\n",
      "1Story    726\n",
      "2Story    441\n",
      "1.5Fin    154\n",
      "SLvl       65\n",
      "SFoyer     37\n",
      "1.5Unf     14\n",
      "2.5Unf     11\n",
      "2.5Fin      8\n",
      "Name: HouseStyle, dtype: int64\n",
      "\n",
      "\n",
      "Gable      1140\n",
      "Hip         283\n",
      "Flat         13\n",
      "Gambrel      11\n",
      "Mansard       7\n",
      "Shed          2\n",
      "Name: RoofStyle, dtype: int64\n",
      "\n",
      "\n",
      "CompShg    1432\n",
      "Tar&Grv      11\n",
      "WdShake       5\n",
      "WdShngl       5\n",
      "Roll          1\n",
      "Membran       1\n",
      "Metal         1\n",
      "Name: RoofMatl, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    515\n",
      "HdBoard    221\n",
      "MetalSd    220\n",
      "Wd Sdng    205\n",
      "Plywood    108\n",
      "CemntBd     60\n",
      "BrkFace     50\n",
      "WdShing     26\n",
      "Stucco      24\n",
      "AsbShng     20\n",
      "Stone        2\n",
      "BrkComm      2\n",
      "AsphShn      1\n",
      "CBlock       1\n",
      "ImStucc      1\n",
      "Name: Exterior1st, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    504\n",
      "MetalSd    214\n",
      "HdBoard    206\n",
      "Wd Sdng    197\n",
      "Plywood    142\n",
      "CmentBd     59\n",
      "Wd Shng     38\n",
      "BrkFace     25\n",
      "Stucco      25\n",
      "AsbShng     20\n",
      "ImStucc      9\n",
      "Brk Cmn      7\n",
      "Stone        5\n",
      "AsphShn      3\n",
      "CBlock       1\n",
      "Other        1\n",
      "Name: Exterior2nd, dtype: int64\n",
      "\n",
      "\n",
      "BrkFace    444\n",
      "Stone      126\n",
      "BrkCmn      15\n",
      "Name: MasVnrType, dtype: int64\n",
      "\n",
      "\n",
      "TA    906\n",
      "Gd    487\n",
      "Ex     49\n",
      "Fa     14\n",
      "Name: ExterQual, dtype: int64\n",
      "\n",
      "\n",
      "TA    1278\n",
      "Gd     146\n",
      "Fa      28\n",
      "Ex       3\n",
      "Po       1\n",
      "Name: ExterCond, dtype: int64\n",
      "\n",
      "\n",
      "PConc     643\n",
      "CBlock    634\n",
      "BrkTil    146\n",
      "Slab       24\n",
      "Stone       6\n",
      "Wood        3\n",
      "Name: Foundation, dtype: int64\n",
      "\n",
      "\n",
      "TA    649\n",
      "Gd    618\n",
      "Ex    117\n",
      "No     37\n",
      "Fa     35\n",
      "Name: BsmtQual, dtype: int64\n",
      "\n",
      "\n",
      "TA    1307\n",
      "Gd      65\n",
      "Fa      45\n",
      "No      37\n",
      "Po       2\n",
      "Name: BsmtCond, dtype: int64\n",
      "\n",
      "\n",
      "No    991\n",
      "Av    220\n",
      "Gd    131\n",
      "Mn    114\n",
      "Name: BsmtExposure, dtype: int64\n",
      "\n",
      "\n",
      "Unf    430\n",
      "GLQ    414\n",
      "ALQ    220\n",
      "BLQ    148\n",
      "Rec    133\n",
      "LwQ     74\n",
      "No      37\n",
      "Name: BsmtFinType1, dtype: int64\n",
      "\n",
      "\n",
      "Unf    1252\n",
      "Rec      54\n",
      "LwQ      46\n",
      "No       38\n",
      "BLQ      33\n",
      "ALQ      19\n",
      "GLQ      14\n",
      "Name: BsmtFinType2, dtype: int64\n",
      "\n",
      "\n",
      "GasA     1424\n",
      "GasW       18\n",
      "Grav        7\n",
      "Wall        4\n",
      "OthW        2\n",
      "Floor       1\n",
      "Name: Heating, dtype: int64\n",
      "\n",
      "\n",
      "Ex    737\n",
      "TA    428\n",
      "Gd    241\n",
      "Fa     49\n",
      "Po      1\n",
      "Name: HeatingQC, dtype: int64\n",
      "\n",
      "\n",
      "Y    1361\n",
      "N      95\n",
      "Name: CentralAir, dtype: int64\n",
      "\n",
      "\n",
      "SBrkr    1330\n",
      "FuseA      94\n",
      "FuseF      27\n",
      "FuseP       3\n",
      "Mix         1\n",
      "Name: Electrical, dtype: int64\n",
      "\n",
      "\n",
      "TA    735\n",
      "Gd    586\n",
      "Ex     96\n",
      "Fa     39\n",
      "Name: KitchenQual, dtype: int64\n",
      "\n",
      "\n",
      "Typ     1356\n",
      "Min2      34\n",
      "Min1      31\n",
      "Mod       15\n",
      "Maj1      14\n",
      "Maj2       5\n",
      "Sev        1\n",
      "Name: Functional, dtype: int64\n",
      "\n",
      "\n",
      "No    690\n",
      "Gd    378\n",
      "TA    312\n",
      "Fa     33\n",
      "Ex     23\n",
      "Po     20\n",
      "Name: FireplaceQu, dtype: int64\n",
      "\n",
      "\n",
      "Attchd     867\n",
      "Detchd     387\n",
      "BuiltIn     87\n",
      "No          81\n",
      "Basment     19\n",
      "CarPort      9\n",
      "2Types       6\n",
      "Name: GarageType, dtype: int64\n",
      "\n",
      "\n",
      "Unf    605\n",
      "RFn    422\n",
      "Fin    348\n",
      "No      81\n",
      "Name: GarageFinish, dtype: int64\n",
      "\n",
      "\n",
      "TA    1307\n",
      "No      81\n",
      "Fa      48\n",
      "Gd      14\n",
      "Ex       3\n",
      "Po       3\n",
      "Name: GarageQual, dtype: int64\n",
      "\n",
      "\n",
      "TA    1322\n",
      "No      81\n",
      "Fa      35\n",
      "Gd       9\n",
      "Po       7\n",
      "Ex       2\n",
      "Name: GarageCond, dtype: int64\n",
      "\n",
      "\n",
      "Y    1336\n",
      "N      90\n",
      "P      30\n",
      "Name: PavedDrive, dtype: int64\n",
      "\n",
      "\n",
      "No    1451\n",
      "Gd       2\n",
      "Fa       2\n",
      "Ex       1\n",
      "Name: PoolQC, dtype: int64\n",
      "\n",
      "\n",
      "No       1176\n",
      "MnPrv     156\n",
      "GdPrv      59\n",
      "GdWo       54\n",
      "MnWw       11\n",
      "Name: Fence, dtype: int64\n",
      "\n",
      "\n",
      "No      1402\n",
      "Shed      49\n",
      "Gar2       2\n",
      "Othr       2\n",
      "TenC       1\n",
      "Name: MiscFeature, dtype: int64\n",
      "\n",
      "\n",
      "WD       1265\n",
      "New       120\n",
      "COD        43\n",
      "ConLD       9\n",
      "ConLw       5\n",
      "ConLI       5\n",
      "CWD         4\n",
      "Oth         3\n",
      "Con         2\n",
      "Name: SaleType, dtype: int64\n",
      "\n",
      "\n",
      "Normal     1197\n",
      "Partial     123\n",
      "Abnorml     100\n",
      "Family       20\n",
      "Alloca       12\n",
      "AdjLand       4\n",
      "Name: SaleCondition, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Graphing missing data\n",
    "group = housetrain.columns.to_series().groupby(housetrain.dtypes).groups # grouping columns by type\n",
    "groups={k.name: v for k, v in group.items()} #  creating as dictionary\n",
    "\n",
    "# Taking only the object type col names\n",
    "objects=housetrain[groups['object'].values]\n",
    "#print(objects.head(5))\n",
    "# Printing freqiency counts\n",
    "for i in objects.columns:\n",
    "        #print('{} \\n' .format(objects[i]))\n",
    "        print(objects[i].value_counts())\n",
    "        print('\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can observe, there are over a dozen varaibles that have more than 5 distinct values. There will be a lot of work involved in completing this recoding. Below find the list of variables, how we rocoded and why. If a variable is not listed, it was deemed that no changes were necessary to the variable.\n",
    "\n",
    "* MSSubClass: Complex - Requires Specilised case\n",
    "*     MSZoning: Complex - Requires Specilised case\n",
    "*     LotShape: Grouped the irregular options together to create more balanced variable\n",
    "*     LandContour: Changed to binary in order to create a more balanced variable\n",
    "*     LotConfig: Grouped Frontage together to create a more balanced variable\n",
    "*     Neighborhood: Complex - Requires Specilised case\n",
    "*     Condition1: Grouped railrowad and positive features to create a more balanced variable\n",
    "*     Condition2: Grouped railrowad and positive features to create a more balanced variable\n",
    "*     HouseStyle: Grouped 1 story and 1.5 story together, 2 story+ together to reduce number of distinct values\n",
    "*     OverallQual: Recoded to reduce number of distinct values/add numerical order\n",
    "*     OverallCond: Recoded to reduce number of distinct values/add numerical order\n",
    "*     RoofStyle: Regrouped everything not Gable or Hip to other to create more balanced variable\n",
    "*     RoofMatl: Made binary of standard vs not standard to reduce number of distinct values\n",
    "*     Exterior1st: Complex - Requires Specilised case\n",
    "*     Exterior2nd: Complex - Requires Specilised case\n",
    "*     ExterQual: Recoded to reduce number of distinct values/add numerical order\n",
    "*     ExterCond: Recoded to reduce number of distinct values/add numerical order\n",
    "*     Foundation: Grouped non standard to other to reduce number of distinct variables\n",
    "*     BsmtQual: Recoded to reduce number of distinct values/add numerical order\n",
    "*     BsmtCond: Recoded to reduce number of distinct values/add numerical order\n",
    "*     BsmtExposure: Recoded to reduce number of distinct values/add numerical orders\n",
    "*     BsmtFinType1: Grouped like values together to reduce number of distinct values\n",
    "*     BsmtFinType2: Grouped like values together to reduce number of distinct values\n",
    "*     Heating: Grouped Gas together to reduce number of distinct values\n",
    "*     HeatingQC: Recoded to reduce number of distinct values/add numerical order\n",
    "*     KitchenQual: Recoded to reduce number of distinct values/add numerical order\n",
    "*     Functional: Recoded to reduce number of distinct values/add numerical order\n",
    "*     GarageType: Complex - Requires Specilised case\n",
    "*     GarageQual: Recoded to reduce number of distinct values/add numerical order\n",
    "*     GarageCond: Recoded to reduce number of distinct values/add numerical order\n",
    "*     SaleType: Grouped similar contracts together to reduce number of distinct values\n",
    "*     SaleCondition: Complex - Requires Specilised case\n",
    "\n",
    "The next blocks of code execute the above descriptions. We replace all the \"Excellent\" and \"Good\" ratings with 3, \"Average\" with 2 and so on. We group frontage on either 2 sides and frontage on 3 sides to just frontage for *LotConfig* and many other changes in order to make the data more manageable, reduce the curse of dimensionaility, and ultimately, create a better model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20     536\n",
      "60     295\n",
      "50     144\n",
      "120     87\n",
      "30      69\n",
      "160     63\n",
      "70      60\n",
      "80      58\n",
      "90      52\n",
      "190     30\n",
      "85      20\n",
      "75      16\n",
      "45      12\n",
      "180     10\n",
      "40       4\n",
      "Name: MSSubClass, dtype: int64\n",
      "\n",
      "\n",
      "RL         1147\n",
      "RM          218\n",
      "FV           65\n",
      "RH           16\n",
      "C (all)      10\n",
      "Name: MSZoning, dtype: int64\n",
      "\n",
      "\n",
      "Pave    1450\n",
      "Grvl       6\n",
      "Name: Street, dtype: int64\n",
      "\n",
      "\n",
      "None    1365\n",
      "Grvl      50\n",
      "Pave      41\n",
      "Name: Alley, dtype: int64\n",
      "\n",
      "\n",
      "Reg      925\n",
      "IRReg    531\n",
      "Name: LotShape, dtype: int64\n",
      "\n",
      "\n",
      "Lvl        1309\n",
      "NotFlat     147\n",
      "Name: LandContour, dtype: int64\n",
      "\n",
      "\n",
      "AllPub    1455\n",
      "NoSeWa       1\n",
      "Name: Utilities, dtype: int64\n",
      "\n",
      "\n",
      "Inside      1051\n",
      "Corner       260\n",
      "CulDSac       94\n",
      "Frontage      51\n",
      "Name: LotConfig, dtype: int64\n",
      "\n",
      "\n",
      "Gtl    1378\n",
      "Mod      65\n",
      "Sev      13\n",
      "Name: LandSlope, dtype: int64\n",
      "\n",
      "\n",
      "NAmes      225\n",
      "CollgCr    150\n",
      "OldTown    113\n",
      "Edwards     98\n",
      "Somerst     86\n",
      "Gilbert     79\n",
      "NridgHt     77\n",
      "Sawyer      74\n",
      "NWAmes      73\n",
      "SawyerW     59\n",
      "BrkSide     58\n",
      "Crawfor     51\n",
      "Mitchel     49\n",
      "NoRidge     39\n",
      "Timber      38\n",
      "IDOTRR      37\n",
      "ClearCr     28\n",
      "SWISU       25\n",
      "StoneBr     25\n",
      "Blmngtn     17\n",
      "MeadowV     17\n",
      "BrDale      16\n",
      "Veenker     11\n",
      "NPkVill      9\n",
      "Blueste      2\n",
      "Name: Neighborhood, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1258\n",
      "Feedr       80\n",
      "Artery      48\n",
      "Rail        44\n",
      "Pos         26\n",
      "Name: Condition1, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1442\n",
      "Feedr        6\n",
      "Rail         4\n",
      "Artery       2\n",
      "Pos          2\n",
      "Name: Condition2, dtype: int64\n",
      "\n",
      "\n",
      "1Fam      1216\n",
      "TwnhsE     114\n",
      "Duplex      52\n",
      "Twnhs       43\n",
      "2fmCon      31\n",
      "Name: BldgType, dtype: int64\n",
      "\n",
      "\n",
      "1to2Story    894\n",
      "2+Story      460\n",
      "SLvl          65\n",
      "SFoyer        37\n",
      "Name: HouseStyle, dtype: int64\n",
      "\n",
      "\n",
      "Gable    1140\n",
      "Hip       283\n",
      "Other      33\n",
      "Name: RoofStyle, dtype: int64\n",
      "\n",
      "\n",
      "CompShg    1432\n",
      "Other        24\n",
      "Name: RoofMatl, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    515\n",
      "HdBoard    221\n",
      "MetalSd    220\n",
      "Wd Sdng    205\n",
      "Plywood    108\n",
      "CemntBd     60\n",
      "BrkFace     50\n",
      "WdShing     26\n",
      "Stucco      24\n",
      "AsbShng     20\n",
      "Stone        2\n",
      "BrkComm      2\n",
      "AsphShn      1\n",
      "CBlock       1\n",
      "ImStucc      1\n",
      "Name: Exterior1st, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    504\n",
      "MetalSd    214\n",
      "HdBoard    206\n",
      "Wd Sdng    197\n",
      "Plywood    142\n",
      "CmentBd     59\n",
      "Wd Shng     38\n",
      "BrkFace     25\n",
      "Stucco      25\n",
      "AsbShng     20\n",
      "ImStucc      9\n",
      "Brk Cmn      7\n",
      "Stone        5\n",
      "AsphShn      3\n",
      "CBlock       1\n",
      "Other        1\n",
      "Name: Exterior2nd, dtype: int64\n",
      "\n",
      "\n",
      "BrkFace    444\n",
      "Stone      126\n",
      "BrkCmn      15\n",
      "Name: MasVnrType, dtype: int64\n",
      "\n",
      "\n",
      "TA               906\n",
      "Above Average    536\n",
      "Below Average     14\n",
      "Name: ExterQual, dtype: int64\n",
      "\n",
      "\n",
      "TA               1278\n",
      "Above Average     149\n",
      "Below Average      29\n",
      "Name: ExterCond, dtype: int64\n",
      "\n",
      "\n",
      "PConc     643\n",
      "CBlock    634\n",
      "Other     179\n",
      "Name: Foundation, dtype: int64\n",
      "\n",
      "\n",
      "Above Average    735\n",
      "TA               649\n",
      "No                37\n",
      "Below Average     35\n",
      "Name: BsmtQual, dtype: int64\n",
      "\n",
      "\n",
      "TA               1307\n",
      "Above Average      65\n",
      "Below Average      47\n",
      "No                 37\n",
      "Name: BsmtCond, dtype: int64\n",
      "\n",
      "\n",
      "No    991\n",
      "Av    220\n",
      "Gd    131\n",
      "Mn    114\n",
      "Name: BsmtExposure, dtype: int64\n",
      "\n",
      "\n",
      "Unf              430\n",
      "GLQ              414\n",
      "Average          353\n",
      "Below Average    222\n",
      "No                37\n",
      "Name: BsmtFinType1, dtype: int64\n",
      "\n",
      "\n",
      "Unf              1252\n",
      "Below Average      79\n",
      "Average            73\n",
      "No                 38\n",
      "GLQ                14\n",
      "Name: BsmtFinType2, dtype: int64\n",
      "\n",
      "\n",
      "Gas      1442\n",
      "Grav        7\n",
      "Wall        4\n",
      "OthW        2\n",
      "Floor       1\n",
      "Name: Heating, dtype: int64\n",
      "\n",
      "\n",
      "Above Average    978\n",
      "TA               428\n",
      "Below Average     50\n",
      "Name: HeatingQC, dtype: int64\n",
      "\n",
      "\n",
      "Y    1361\n",
      "N      95\n",
      "Name: CentralAir, dtype: int64\n",
      "\n",
      "\n",
      "SBrkr    1330\n",
      "FuseA      94\n",
      "FuseF      27\n",
      "FuseP       3\n",
      "Mix         1\n",
      "Name: Electrical, dtype: int64\n",
      "\n",
      "\n",
      "TA               735\n",
      "Above Average    682\n",
      "Below Average     39\n",
      "Name: KitchenQual, dtype: int64\n",
      "\n",
      "\n",
      "Typ    1356\n",
      "Min      65\n",
      "Maj      20\n",
      "Mod      15\n",
      "Name: Functional, dtype: int64\n",
      "\n",
      "\n",
      "No    690\n",
      "Gd    378\n",
      "TA    312\n",
      "Fa     33\n",
      "Ex     23\n",
      "Po     20\n",
      "Name: FireplaceQu, dtype: int64\n",
      "\n",
      "\n",
      "Attchd     867\n",
      "Detchd     387\n",
      "BuiltIn     87\n",
      "No          81\n",
      "Basment     19\n",
      "CarPort      9\n",
      "2Types       6\n",
      "Name: GarageType, dtype: int64\n",
      "\n",
      "\n",
      "Unf    605\n",
      "RFn    422\n",
      "Fin    348\n",
      "No      81\n",
      "Name: GarageFinish, dtype: int64\n",
      "\n",
      "\n",
      "TA               1307\n",
      "No                 81\n",
      "Below Average      51\n",
      "Above Average      17\n",
      "Name: GarageQual, dtype: int64\n",
      "\n",
      "\n",
      "TA               1322\n",
      "No                 81\n",
      "Below Average      42\n",
      "Above Average      11\n",
      "Name: GarageCond, dtype: int64\n",
      "\n",
      "\n",
      "Y    1336\n",
      "N      90\n",
      "P      30\n",
      "Name: PavedDrive, dtype: int64\n",
      "\n",
      "\n",
      "No    1451\n",
      "Gd       2\n",
      "Fa       2\n",
      "Ex       1\n",
      "Name: PoolQC, dtype: int64\n",
      "\n",
      "\n",
      "No       1176\n",
      "MnPrv     156\n",
      "GdPrv      59\n",
      "GdWo       54\n",
      "MnWw       11\n",
      "Name: Fence, dtype: int64\n",
      "\n",
      "\n",
      "No      1402\n",
      "Shed      49\n",
      "Gar2       2\n",
      "Othr       2\n",
      "TenC       1\n",
      "Name: MiscFeature, dtype: int64\n",
      "\n",
      "\n",
      "Warrenty Deed    1269\n",
      "New               120\n",
      "COD                43\n",
      "Contract           21\n",
      "Oth                 3\n",
      "Name: SaleType, dtype: int64\n",
      "\n",
      "\n",
      "Normal     1197\n",
      "Partial     123\n",
      "Abnorml     100\n",
      "Family       20\n",
      "Alloca       12\n",
      "AdjLand       4\n",
      "Name: SaleCondition, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# reg or irreg\n",
    "housetrain['LotShape']=housetrain['LotShape'].replace(['IR1','IR2','IR3'],'IRReg')\n",
    "#print(housetrain['LotShape'].value_counts())\n",
    "\n",
    "# flat or not flat\n",
    "housetrain['LandContour']=housetrain['LandContour'].replace(['Bnk','HLS','Low'],'NotFlat')\n",
    "#print(housetrain['LandContour'].value_counts())\n",
    "\n",
    "# combined frontage\n",
    "housetrain['LotConfig']=housetrain['LotConfig'].replace(['FR2','FR3'],'Frontage')\n",
    "#print(housetrain['LotConfig'].value_counts())\n",
    "\n",
    "# combined rail and pos\n",
    "housetrain['Condition1']=housetrain['Condition1'].replace(['RRNn','RRAn','RRNe','RRAe'],'Rail')\n",
    "housetrain['Condition1']=housetrain['Condition1'].replace(['PosN','PosA'],'Pos')\n",
    "#print(housetrain['Condition1'].value_counts())\n",
    "\n",
    "# combined rail and pos\n",
    "housetrain['Condition2']=housetrain['Condition2'].replace(['RRNn','RRAn','RRNe','RRAe'],'Rail')\n",
    "housetrain['Condition2']=housetrain['Condition2'].replace(['PosN','PosA'],'Pos')\n",
    "#print(housetrain['Condition2'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['ExterQual']=housetrain['ExterQual'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['ExterQual']=housetrain['ExterQual'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['ExterQual'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['ExterCond']=housetrain['ExterCond'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['ExterCond']=housetrain['ExterCond'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['ExterCond'].value_counts())\n",
    "\n",
    "housetrain['HouseStyle']=housetrain['HouseStyle'].replace(['1Story','1.5Unf','1.5Fin'],'1to2Story')\n",
    "housetrain['HouseStyle']=housetrain['HouseStyle'].replace(['2Story','2.5Unf','2.5Fin'],'2+Story')\n",
    "#print(housetrain['HouseStyle'].value_counts())\n",
    "\n",
    "housetrain['RoofStyle']=housetrain['RoofStyle'].replace(['Flat','Gambrel','Mansard','Shed'],'Other')\n",
    "#print(housetrain['RoofStyle'].value_counts())\n",
    "\n",
    "housetrain['RoofMatl']=housetrain['RoofMatl'].replace(['ClyTile','Membran','Metal','Roll','Tar&Grv','WdShake','WdShngl'],'Other')\n",
    "#print(housetrain['RoofMatl'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['SaleType']=housetrain['SaleType'].replace(['WD','CWD','VWD'],'Warrenty Deed')\n",
    "housetrain['SaleType']=housetrain['SaleType'].replace(['Con','ConLw','ConLI','ConLD'],'Contract')\n",
    "#print(housetrain['SaleType'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['GarageCond']=housetrain['GarageCond'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['GarageCond']=housetrain['GarageCond'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['GarageCond'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['GarageQual']=housetrain['GarageQual'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['GarageQual']=housetrain['GarageQual'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['GarageQual'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['Functional']=housetrain['Functional'].replace(['Min1','Min2'],'Min')\n",
    "housetrain['Functional']=housetrain['Functional'].replace(['Maj1','Maj2','Sev','Sal'],'Maj')\n",
    "#print(housetrain['Functional'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['KitchenQual']=housetrain['KitchenQual'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['KitchenQual']=housetrain['KitchenQual'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['KitchenQual'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['HeatingQC']=housetrain['HeatingQC'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['HeatingQC']=housetrain['HeatingQC'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['HeatingQC'].value_counts())\n",
    "\n",
    "# Merging Gas\n",
    "housetrain['Heating']=housetrain['Heating'].replace(['GasA','GasW'],'Gas')\n",
    "#print(housetrain['Heating'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['BsmtFinType2']=housetrain['BsmtFinType2'].replace(['ALQ','Rec'],'Average')\n",
    "housetrain['BsmtFinType2']=housetrain['BsmtFinType2'].replace(['BLQ','LwQ'],'Below Average')\n",
    "#print(housetrain['BsmtFinType2'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['BsmtFinType1']=housetrain['BsmtFinType1'].replace(['ALQ','Rec'],'Average')\n",
    "housetrain['BsmtFinType1']=housetrain['BsmtFinType1'].replace(['BLQ','LwQ'],'Below Average')\n",
    "#print(housetrain['BsmtFinType1'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['BsmtCond']=housetrain['BsmtCond'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['BsmtCond']=housetrain['BsmtCond'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['BsmtCond'].value_counts())\n",
    "\n",
    "# Recoding to have less options and grouping similar\n",
    "housetrain['BsmtQual']=housetrain['BsmtQual'].replace(['Ex','Gd'],'Above Average')\n",
    "housetrain['BsmtQual']=housetrain['BsmtQual'].replace(['Fa','Po'],'Below Average')\n",
    "#print(housetrain['BsmtQual'].value_counts())\n",
    "\n",
    "# Foundation: One of the more standard options or other\n",
    "housetrain['Foundation']=housetrain['Foundation'].replace(['BrkTil','Slab','Stone','Wood'],'Other')\n",
    "#print(housetrain['Foundation'].value_counts())\n",
    "group = housetrain.columns.to_series().groupby(housetrain.dtypes).groups # grouping columns by type\n",
    "groups={k.name: v for k, v in group.items()} #  creating as dictionary\n",
    "\n",
    "# Taking only the object type col names\n",
    "objects=housetrain[groups['object'].values]\n",
    "for i in objects.columns:\n",
    "        #print('{} \\n' .format(objects[i]))\n",
    "        print(objects[i].value_counts())\n",
    "        print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20     536\n",
      "60     295\n",
      "50     144\n",
      "120     87\n",
      "30      69\n",
      "160     63\n",
      "70      60\n",
      "80      58\n",
      "90      52\n",
      "190     30\n",
      "85      20\n",
      "75      16\n",
      "45      12\n",
      "180     10\n",
      "40       4\n",
      "Name: MSSubClass, dtype: int64\n",
      "\n",
      "\n",
      "RL         1147\n",
      "RM          218\n",
      "FV           65\n",
      "RH           16\n",
      "C (all)      10\n",
      "Name: MSZoning, dtype: int64\n",
      "\n",
      "\n",
      "Pave    1450\n",
      "Grvl       6\n",
      "Name: Street, dtype: int64\n",
      "\n",
      "\n",
      "None    1365\n",
      "Grvl      50\n",
      "Pave      41\n",
      "Name: Alley, dtype: int64\n",
      "\n",
      "\n",
      "AllPub    1455\n",
      "NoSeWa       1\n",
      "Name: Utilities, dtype: int64\n",
      "\n",
      "\n",
      "Inside      1051\n",
      "Corner       260\n",
      "CulDSac       94\n",
      "Frontage      51\n",
      "Name: LotConfig, dtype: int64\n",
      "\n",
      "\n",
      "NAmes      225\n",
      "CollgCr    150\n",
      "OldTown    113\n",
      "Edwards     98\n",
      "Somerst     86\n",
      "Gilbert     79\n",
      "NridgHt     77\n",
      "Sawyer      74\n",
      "NWAmes      73\n",
      "SawyerW     59\n",
      "BrkSide     58\n",
      "Crawfor     51\n",
      "Mitchel     49\n",
      "NoRidge     39\n",
      "Timber      38\n",
      "IDOTRR      37\n",
      "ClearCr     28\n",
      "SWISU       25\n",
      "StoneBr     25\n",
      "Blmngtn     17\n",
      "MeadowV     17\n",
      "BrDale      16\n",
      "Veenker     11\n",
      "NPkVill      9\n",
      "Blueste      2\n",
      "Name: Neighborhood, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1258\n",
      "Feedr       80\n",
      "Artery      48\n",
      "Rail        44\n",
      "Pos         26\n",
      "Name: Condition1, dtype: int64\n",
      "\n",
      "\n",
      "Norm      1442\n",
      "Feedr        6\n",
      "Rail         4\n",
      "Artery       2\n",
      "Pos          2\n",
      "Name: Condition2, dtype: int64\n",
      "\n",
      "\n",
      "1Fam      1216\n",
      "TwnhsE     114\n",
      "Duplex      52\n",
      "Twnhs       43\n",
      "2fmCon      31\n",
      "Name: BldgType, dtype: int64\n",
      "\n",
      "\n",
      "1to2Story    894\n",
      "2+Story      460\n",
      "SLvl          65\n",
      "SFoyer        37\n",
      "Name: HouseStyle, dtype: int64\n",
      "\n",
      "\n",
      "Gable    1140\n",
      "Hip       283\n",
      "Other      33\n",
      "Name: RoofStyle, dtype: int64\n",
      "\n",
      "\n",
      "CompShg    1432\n",
      "Other        24\n",
      "Name: RoofMatl, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    515\n",
      "HdBoard    221\n",
      "MetalSd    220\n",
      "Wd Sdng    205\n",
      "Plywood    108\n",
      "CemntBd     60\n",
      "BrkFace     50\n",
      "WdShing     26\n",
      "Stucco      24\n",
      "AsbShng     20\n",
      "Stone        2\n",
      "BrkComm      2\n",
      "AsphShn      1\n",
      "CBlock       1\n",
      "ImStucc      1\n",
      "Name: Exterior1st, dtype: int64\n",
      "\n",
      "\n",
      "VinylSd    504\n",
      "MetalSd    214\n",
      "HdBoard    206\n",
      "Wd Sdng    197\n",
      "Plywood    142\n",
      "CmentBd     59\n",
      "Wd Shng     38\n",
      "BrkFace     25\n",
      "Stucco      25\n",
      "AsbShng     20\n",
      "ImStucc      9\n",
      "Brk Cmn      7\n",
      "Stone        5\n",
      "AsphShn      3\n",
      "CBlock       1\n",
      "Other        1\n",
      "Name: Exterior2nd, dtype: int64\n",
      "\n",
      "\n",
      "BrkFace    444\n",
      "Stone      126\n",
      "BrkCmn      15\n",
      "Name: MasVnrType, dtype: int64\n",
      "\n",
      "\n",
      "PConc     643\n",
      "CBlock    634\n",
      "Other     179\n",
      "Name: Foundation, dtype: int64\n",
      "\n",
      "\n",
      "Gas      1442\n",
      "Grav        7\n",
      "Wall        4\n",
      "OthW        2\n",
      "Floor       1\n",
      "Name: Heating, dtype: int64\n",
      "\n",
      "\n",
      "SBrkr    1330\n",
      "FuseA      94\n",
      "FuseF      27\n",
      "FuseP       3\n",
      "Mix         1\n",
      "Name: Electrical, dtype: int64\n",
      "\n",
      "\n",
      "No    690\n",
      "Gd    378\n",
      "TA    312\n",
      "Fa     33\n",
      "Ex     23\n",
      "Po     20\n",
      "Name: FireplaceQu, dtype: int64\n",
      "\n",
      "\n",
      "Attchd     867\n",
      "Detchd     387\n",
      "BuiltIn     87\n",
      "No          81\n",
      "Basment     19\n",
      "CarPort      9\n",
      "2Types       6\n",
      "Name: GarageType, dtype: int64\n",
      "\n",
      "\n",
      "Unf    605\n",
      "RFn    422\n",
      "Fin    348\n",
      "No      81\n",
      "Name: GarageFinish, dtype: int64\n",
      "\n",
      "\n",
      "No    1451\n",
      "Gd       2\n",
      "Fa       2\n",
      "Ex       1\n",
      "Name: PoolQC, dtype: int64\n",
      "\n",
      "\n",
      "No      1402\n",
      "Shed      49\n",
      "Gar2       2\n",
      "Othr       2\n",
      "TenC       1\n",
      "Name: MiscFeature, dtype: int64\n",
      "\n",
      "\n",
      "Warrenty Deed    1269\n",
      "New               120\n",
      "COD                43\n",
      "Contract           21\n",
      "Oth                 3\n",
      "Name: SaleType, dtype: int64\n",
      "\n",
      "\n",
      "Normal     1197\n",
      "Partial     123\n",
      "Abnorml     100\n",
      "Family       20\n",
      "Alloca       12\n",
      "AdjLand       4\n",
      "Name: SaleCondition, dtype: int64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Encode some categorical features as ordered numbers when there is information in the order\n",
    "housetrain = housetrain.replace({\"BsmtCond\" : {\"No\" : 0, \"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"BsmtExposure\" : {\"No\" : 0, \"Mn\" : 1, \"Av\": 2, \"Gd\" : 3},\n",
    "                        \"Fence\":{\"GdPrv\":2,\"GdWo\":2,\"MnPrv\":1,\"MnWw\":1,\"No\":0},\n",
    "                        \"LotShape\":{\"IRReg\":0,\"Reg\":1},\n",
    "                        \"CentralAir\":{\"N\":0,\"Y\":1},\n",
    "                        \"LandContour\":{\"NotFlat\":0,\"Lvl\":1},\n",
    "                        \"PavedDrive\":{\"N\":0,\"Y\":1,\"P\":1},\n",
    "                       \"BsmtQual\" : {\"No\" : 0, \"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"ExterCond\" : {\"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"ExterQual\" : {\"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"BsmtFinType1\":{\"No\":0,\"Unf\":1,\"Below Average\":1,\"Average\":2,\"GLQ\":3},\n",
    "                        \"BsmtFinType2\":{\"No\":0,\"Unf\":1,\"Below Average\":1,\"Average\":2,\"GLQ\":3},\n",
    "                       \"Functional\" : {\"Maj\" : 1, \"Mod\" : 2, \"Min\" : 3, \"Typ\" : 4},\n",
    "                       \"GarageCond\" : {\"No\" : 0, \"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"GarageQual\" : {\"No\" : 0, \"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"HeatingQC\" : {\"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"KitchenQual\" : {\"Below Average\" : 1, \"TA\" : 2, \"Above Average\":3},\n",
    "                       \"LandSlope\" : {\"Sev\" : 1, \"Mod\" : 2, \"Gtl\" : 3}}\n",
    "                     )\n",
    "\n",
    "# Create new features\n",
    "# 1* Simplifications of existing features\n",
    "housetrain[\"OverallQual\"] = housetrain.OverallQual.replace({1 : 1, 2 : 1, 3 : 1, # bad\n",
    "                                                       4 : 2, 5 : 2, 6 : 2, # average\n",
    "                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n",
    "                                                      })\n",
    "housetrain[\"OverallCond\"] = housetrain.OverallCond.replace({1 : 1, 2 : 1, 3 : 1, # bad\n",
    "                                                       4 : 2, 5 : 2, 6 : 2, # average\n",
    "                                                       7 : 3, 8 : 3, 9 : 3, 10 : 3 # good\n",
    "                                                      })\n",
    "\n",
    "\n",
    "\n",
    "group = housetrain.columns.to_series().groupby(housetrain.dtypes).groups # grouping columns by type\n",
    "groups={k.name: v for k, v in group.items()} #  creating as dictionary\n",
    "\n",
    "# Taking only the object type col names\n",
    "objects=housetrain[groups['object'].values]\n",
    "for i in objects.columns:\n",
    "        #print('{} \\n' .format(objects[i]))\n",
    "        print(objects[i].value_counts())\n",
    "        print('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Combining variables\n",
    "housetrain['BsmtFinSF']=housetrain['BsmtFinSF1']+housetrain['BsmtFinSF2']\n",
    "housetrain['PorchSF']=housetrain['OpenPorchSF']+housetrain['EnclosedPorch']+housetrain['3SsnPorch']+housetrain['ScreenPorch']\n",
    "\n",
    "housetrain['hasPool'] = np.where(housetrain['PoolArea']>0, 1, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Specialized Recoding Cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Specialized Recoding\n",
    "# Neighborhood (based off average)\n",
    "housetrain['Neighborhood']=housetrain['Neighborhood'].replace(['MeadowV', 'IDOTRR', 'BrDale', 'BrkSide', 'Edwards', 'OldTown', \n",
    "                                                               'Sawyer', 'Blueste'],'Low')\n",
    "housetrain['Neighborhood']=housetrain['Neighborhood'].replace(['SWISU', 'NPkVill', 'NAmes','Mitchel', 'SawyerW', 'NWAmes', \n",
    "                                                               'Gilbert', 'Blmngtn'],'Mid')\n",
    "housetrain['Neighborhood']=housetrain['Neighborhood'].replace(['CollgCr','Crawfor','ClearCr', 'Somerst', 'Veenker', 'Timber', \n",
    "                                                               'StoneBr', 'NridgHt', 'NoRidge'],'High')\n",
    "\n",
    "# Exterior1st\n",
    "housetrain['Exterior1st']=housetrain['Exterior1st'].replace(['Plywood', 'CmentBd', 'Wd Shng', 'Stucco', 'BrkFace', 'AsbShng', \n",
    "                                                           'ImStucc', 'Brk Cmn', 'Stone', 'AsphShn', 'CBlock', 'Other', \n",
    "                                                           'CemntBd', 'WdShing', 'BrkComm'],'AllOther')\n",
    "# Exterior2nd\n",
    "housetrain['Exterior2nd']=housetrain['Exterior2nd'].replace(['Plywood', 'CmentBd', 'Wd Shng', 'Stucco', 'BrkFace', 'AsbShng', \n",
    "                                                           'ImStucc', 'Brk Cmn', 'Stone', 'AsphShn', 'CBlock', 'Other', \n",
    "                                                           'CemntBd', 'WdShing', 'BrkComm'],'AllOther')\n",
    "\n",
    "# Garage Type\n",
    "housetrain['GarageType']=housetrain['GarageType'].replace(['BuiltIn', 'NA', 'Basment', 'CarPort', '2Types'],'Other')\n",
    "\n",
    "# Sale Condition\n",
    "housetrain['SaleCondition']=housetrain['SaleCondition'].replace(['Alloca'],'Normal')\n",
    "housetrain['SaleCondition']=housetrain['SaleCondition'].replace(['Family','AdjLand'],'Other')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mid     536\n",
      "High    505\n",
      "Low     415\n",
      "Name: Neighborhood, dtype: int64\n",
      "VinylSd     515\n",
      "AllOther    295\n",
      "HdBoard     221\n",
      "MetalSd     220\n",
      "Wd Sdng     205\n",
      "Name: Exterior1st, dtype: int64\n",
      "VinylSd     504\n",
      "AllOther    335\n",
      "MetalSd     214\n",
      "HdBoard     206\n",
      "Wd Sdng     197\n",
      "Name: Exterior2nd, dtype: int64\n",
      "Attchd    867\n",
      "Detchd    387\n",
      "Other     121\n",
      "No         81\n",
      "Name: GarageType, dtype: int64\n",
      "Normal     1209\n",
      "Partial     123\n",
      "Abnorml     100\n",
      "Other        24\n",
      "Name: SaleCondition, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(housetrain['Neighborhood'].value_counts())\n",
    "print(housetrain['Exterior1st'].value_counts())\n",
    "print(housetrain['Exterior2nd'].value_counts())\n",
    "print(housetrain['GarageType'].value_counts())\n",
    "print(housetrain['SaleCondition'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
